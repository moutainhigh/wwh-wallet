<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.wwh.dao.IWalletDiskRelationDao" >
  <resultMap id="BaseResultMap" type="com.wwh.vo.WalletDiskRelationVO" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 24 16:31:40 CST 2016.
    -->
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="disk_seq" property="diskSeq" jdbcType="VARCHAR" />
    <result column="disk_type" property="diskType" jdbcType="VARCHAR" />
    <result column="disk_status" property="diskStatus" jdbcType="VARCHAR" />
    <result column="role_id" property="roleId" jdbcType="BIGINT" />
    <result column="localtion" property="localtion" jdbcType="INTEGER" />
    <result column="current_profit" property="currentProfit" jdbcType="DECIMAL" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="id_card" property="idCard" jdbcType="VARCHAR" />
    <result column="active_flag" property="activeFlag" jdbcType="CHAR" />
    <result column="delete_flag" property="deleteFlag" jdbcType="CHAR" />
    <result column="created_date" property="createdDate" jdbcType="TIMESTAMP" />
    <result column="created_by" property="createdBy" jdbcType="BIGINT" />
    <result column="last_updated_date" property="lastUpdatedDate" jdbcType="TIMESTAMP" />
    <result column="last_updated_by" property="lastUpdatedBy" jdbcType="BIGINT" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    id, 
    disk_type as diskType, 
    disk_seq as diskSeq, 
    disk_status as diskStatus,
    role_id as roleId, 
    localtion as localtion, 
    current_profit as currentProfit, 
    user_id as userId, 
    id_card as idCard, 
    active_flag as activeFlag, 
    delete_flag as deleteFlag, 
    created_date as createdDate, 
    created_by as createdBy, 
    last_updated_date as lastUpdatedDate, 
    last_updated_by as lastUpdatedBy
  </sql>


	<!-- 查询盘关系 -->
   <select id="selectDiskRelation" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
    from 
    
   		 <choose>
				<when test="diskType == 'TIYAN'">
					wallet_disk_relation_tiyan_t
				</when>
				<when test="diskType == 'HUIMIN'">
					wallet_disk_relation_huimin_t
				</when>
				<when test="diskType == 'FUMIN'">
					wallet_disk_relation_fumin_t
				</when>
				<when test="diskType == 'XINGMIN'">
					wallet_disk_relation_xingmin_t
				</when>
				<!-- <otherwise>
					wallet_profit_detail_tiyan_t a
				</otherwise> -->
			</choose>
			
    where disk_seq = #{diskSeq,jdbcType=VARCHAR}
    order by localtion 
  </select>
  
   
  	<!-- 查询盘关系 -->
   <select id="selectDiskRelationOverWrite" resultType="com.wwh.vo.WalletDiskRelationVO">
    select 
	    a.id,
		a.disk_type AS diskType,
		a.disk_seq AS diskSeq,
		a.disk_status AS diskStatus,
		a.role_id AS roleId,
		a.localtion AS localtion,
		a.current_profit AS currentProfit,
		a.user_id AS userId,
		a.id_card AS idCard,
		a.active_flag AS activeFlag,
		a.delete_flag AS deleteFlag,
		a.created_date AS createdDate,
		a.created_by AS createdBy,
		a.last_updated_date AS lastUpdatedDate,
		a.last_updated_by AS lastUpdatedBy,
		b.user_name AS userName
    from 
	<choose>
		<when test="diskType == 'TIYAN'">
			wallet_disk_relation_tiyan_t a
		</when>
		<when test="diskType == 'HUIMIN'">
			wallet_disk_relation_huimin_t a
		</when>
		<when test="diskType == 'FUMIN'">
			wallet_disk_relation_fumin_t a
		</when>
		<when test="diskType == 'XINGMIN'">
			wallet_disk_relation_xingmin_t a
		</when>
	</choose>
			LEFT JOIN wwh_user_t b ON a.user_id = b.user_id
    where disk_seq = #{diskSeq,jdbcType=VARCHAR}
  </select>
 
  
  <!-- 查询盘关系通过条件-->
   <select id="selectDiskRelationBySelective" resultMap="BaseResultMap" parameterType="com.wwh.vo.WalletDiskRelationVO" >
    select 
    <include refid="Base_Column_List" />
    from 
   		 <choose>
				<when test="diskType == 'TIYAN'">
					wallet_disk_relation_tiyan_t
				</when>
				<when test="diskType == 'HUIMIN'">
					wallet_disk_relation_huimin_t
				</when>
				<when test="diskType == 'FUMIN'">
					wallet_disk_relation_fumin_t
				</when>
				<when test="diskType == 'XINGMIN'">
					wallet_disk_relation_xingmin_t
				</when>
				<!-- <otherwise>
					wallet_profit_detail_tiyan_t a
				</otherwise> -->
			</choose>
			
    where 1=1
    
     <if test="diskSeq != null" >
      and  disk_seq = #{diskSeq,jdbcType=VARCHAR}
      </if>
      <if test="diskStatus != null" >
       and disk_status = #{diskStatus,jdbcType=VARCHAR}
      </if>
      <if test="diskType != null" >
       and disk_type = #{diskType,jdbcType=VARCHAR}
      </if>
      <if test="roleId != null" >
      and  role_id = #{roleId,jdbcType=BIGINT}
      </if>
      <if test="localtion != null" >
      and  localtion = #{localtion,jdbcType=INTEGER}
      </if>
      <if test="currentProfit != null" >
      and  current_profit = #{currentProfit,jdbcType=DECIMAL}
      </if>
      <if test="userId != null" >
       and user_id = #{userId,jdbcType=BIGINT}
      </if>
      <if test="idCard != null" >
       and id_card = #{idCard,jdbcType=VARCHAR}
      </if>
      <if test="activeFlag != null" >
       and active_flag = #{activeFlag,jdbcType=CHAR}
      </if>
      <if test="deleteFlag != null" >
      and delete_flag = #{deleteFlag,jdbcType=CHAR}
      </if>
      <if test="createdDate != null" >
      and  created_date = #{createdDate,jdbcType=TIMESTAMP}
      </if>
      <if test="createdBy != null" >
      and  created_by = #{createdBy,jdbcType=BIGINT}
      </if>
      <if test="lastUpdatedDate != null" >
      and  last_updated_date = #{lastUpdatedDate,jdbcType=TIMESTAMP}
      </if>
      <if test="lastUpdatedBy != null" >
      and  last_updated_by = #{lastUpdatedBy,jdbcType=BIGINT}
      </if>
      ORDER BY created_date DESC
  </select>
  
  <!-- 查询盘关系通过条件-->
   <select id="getManagersByDiskSeqs" resultType="com.wwh.vo.WalletDiskRelationVO">
    SELECT 
    <include refid="Base_Column_List" />
    FROM 
   		 <choose>
				<when test="diskType == 'TIYAN'">
					wallet_disk_relation_tiyan_t
				</when>
				<when test="diskType == 'HUIMIN'">
					wallet_disk_relation_huimin_t
				</when>
				<when test="diskType == 'FUMIN'">
					wallet_disk_relation_fumin_t
				</when>
				<when test="diskType == 'XINGMIN'">
					wallet_disk_relation_xingmin_t
				</when>
			</choose>
    WHERE
     disk_seq IN 
     <foreach item="item" index="index" collection="records"  separator="," open="(" close=")">
     	#{item}
	 </foreach>
    AND
     role_id = #{roleId}
    AND
     disk_status = #{diskStatus}
    AND active_flag = 'Y'
	AND delete_flag = 'N'
  </select>
  
  
  
   <select id="selectMyRunningDiskByUserId" resultType="com.wwh.vo.WalletDiskRelationVO" >
    SELECT 
    	id,
    	disk_seq diskSeq,
    	disk_status diskStatus,
    	role_id roleId,
    	localtion localtion,
    	current_profit currentProfit,
    	user_id userId,
    	disk_type diskType,
    	id_card idCard,
    	active_flag activeFlag,
    	delete_flag deleteFlag,
    	created_date createdDate,
    	created_by createdBy,
    	last_updated_date lastUpdatedDate,
    	last_updated_by lastUpdatedBy
    FROM 
    <choose>
    	<when test="diskType == 'TIYAN'">wallet_disk_relation_tiyan_t</when>
    	<when test="diskType == 'HUIMIN'">wallet_disk_relation_huimin_t</when>
    	<when test="diskType == 'FUMIN'">wallet_disk_relation_fumin_t</when>
    	<when test="diskType == 'XINGMIN'">wallet_disk_relation_xingmin_t</when>
    </choose>
    WHERE 
    	disk_status = 'RUNNING'
    AND 
    	user_id = #{userId}
  </select>
  
  <select id="selectByDiskVO" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 24 16:31:40 CST 2016.
    -->
    select 
    <include refid="Base_Column_List" />
    from wallet_disk_relation_5000_t
    where 1=1 
    <if test="diskSeq != null" >
       and disk_seq = #{diskSeq,jdbcType=VARCHAR}
      </if>
      <if test="roleId != null" >
        and role_id = #{roleId,jdbcType=BIGINT}
      </if>
      <if test="localtion != null" >
        and localtion = #{localtion,jdbcType=INTEGER}
      </if>
      <if test="currentProfit != null" >
      and  current_profit = #{currentProfit,jdbcType=DECIMAL}
      </if>
      <if test="userId != null" >
       and user_id = #{userId,jdbcType=BIGINT}
      </if>
      <if test="idCard != null" >
       and id_card = #{idCard,jdbcType=VARCHAR}
      </if>
      <if test="activeFlag != null" >
       and active_flag = #{activeFlag,jdbcType=CHAR}
      </if>
      <if test="deleteFlag != null" >
      and  delete_flag = #{deleteFlag,jdbcType=CHAR}
      </if>
      <if test="createdDate != null" >
       and created_date = #{createdDate,jdbcType=TIMESTAMP}
      </if>
      <if test="createdBy != null" >
       and created_by = #{createdBy,jdbcType=BIGINT}
      </if>
      <if test="lastUpdatedDate != null" >
       and last_updated_date = #{lastUpdatedDate,jdbcType=TIMESTAMP}
      </if>
      <if test="lastUpdatedBy != null" >
       and last_updated_by = #{lastUpdatedBy,jdbcType=BIGINT}
      </if> 
  </select>
  
  <select id="selectByDiskSeq" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 24 16:31:40 CST 2016.
    -->
    select 
    <include refid="Base_Column_List" />
    from wallet_disk_relation_5000_t
    where disk_seq = #{diskSeq,jdbcType=BIGINT}
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 24 16:31:40 CST 2016.
    -->
    select 
    <include refid="Base_Column_List" />
    from wallet_disk_relation_5000_t
    where id = #{id,jdbcType=BIGINT}
  </select>
  
	<insert id="insert" parameterType="com.wwh.vo.WalletDiskRelationVO" >
	    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
	      SELECT LAST_INSERT_ID()
	    </selectKey>
	    insert into  
	    <choose>
				<when test="diskType == 'TIYAN'">
					wallet_disk_relation_tiyan_t
				</when>
				<when test="diskType == 'HUIMIN'">
					wallet_disk_relation_huimin_t
				</when>
				<when test="diskType == 'FUMIN'">
					wallet_disk_relation_fumin_t
				</when>
				<when test="diskType == 'XINGMIN'">
					wallet_disk_relation_xingmin_t
				</when>
				<!-- <otherwise>
					wallet_profit_detail_tiyan_t a
				</otherwise> -->
			</choose> 
	    (disk_type,disk_seq, disk_status,role_id, localtion, current_profit,
	      user_id, id_card, active_flag, 
	      delete_flag, created_date, created_by, 
	      last_updated_date, last_updated_by)
	    values (
	    #{diskType,jdbcType=VARCHAR}, 
	    #{diskSeq,jdbcType=VARCHAR}, 
	    #{diskStatus,jdbcType=VARCHAR}, 
	    #{roleId,jdbcType=BIGINT}, 
	    #{localtion,jdbcType=INTEGER}, 
	    #{currentProfit,jdbcType=DECIMAL}, 
	      #{userId,jdbcType=BIGINT}, 
	      #{idCard,jdbcType=VARCHAR}, 
	      #{activeFlag,jdbcType=CHAR}, 
	      #{deleteFlag,jdbcType=CHAR}, 
	      now(), 
	      #{createdBy,jdbcType=BIGINT}, 
	      now(), 
	      #{lastUpdatedBy,jdbcType=BIGINT}
	      )
	  </insert>
  
  
  <!-- 批量插入盘关系 -->
  <insert id="insertBatchDiskRelation" >
    insert into 
     		<choose>
				<when test="diskType == 'TIYAN'">
					wallet_disk_relation_tiyan_t
				</when>
				<when test="diskType == 'HUIMIN'">
					wallet_disk_relation_huimin_t
				</when>
				<when test="diskType == 'FUMIN'">
					wallet_disk_relation_fumin_t
				</when>
				<when test="diskType == 'XINGMIN'">
					wallet_disk_relation_xingmin_t
				</when>
			</choose> 
    (
	    disk_type,
	    disk_seq, 
	    disk_status,
	    role_id, 
	    localtion,
	    current_profit, 
	    user_id, 
	    id_card, 
	    active_flag, 
	    delete_flag, 
	    created_date, 
	    created_by, 
	    last_updated_date, 
	    last_updated_by
    )
    values
	<foreach item="item" index="index" collection="records"  separator="," > 
	    (
		    #{item.diskType,jdbcType=VARCHAR}, 
		    #{item.diskSeq,jdbcType=VARCHAR}, 
		    #{item.diskStatus,jdbcType=VARCHAR}, 
		    #{item.roleId,jdbcType=BIGINT}, 
		    #{item.localtion,jdbcType=INTEGER}, 
		    #{item.currentProfit,jdbcType=DECIMAL}, 
		    #{item.userId,jdbcType=BIGINT}, 
		    #{item.idCard,jdbcType=VARCHAR}, 
		    #{item.activeFlag,jdbcType=CHAR}, 
		    #{item.deleteFlag,jdbcType=CHAR}, 
		    now(), 
		    #{item.createdBy,jdbcType=BIGINT}, 
		    now(), 
		    #{item.lastUpdatedBy,jdbcType=BIGINT}
	    )
	</foreach>
  </insert>
  
 
	  <!-- 修改盘关系完成状态 -->
	 <update id="diskRelationFinished" >
	    UPDATE 
	    	 <choose>
				<when test="diskType == 'TIYAN'">
					wallet_disk_relation_tiyan_t
				</when>
				<when test="diskType == 'HUIMIN'">
					wallet_disk_relation_huimin_t
				</when>
				<when test="diskType == 'FUMIN'">
					wallet_disk_relation_fumin_t
				</when>
				<when test="diskType == 'XINGMIN'">
					wallet_disk_relation_xingmin_t
				</when>
				<!-- <otherwise>
					wallet_profit_detail_tiyan_t a
				</otherwise> -->
			</choose>
	     SET disk_status = 'FINISHED' where   disk_seq= #{diskSeq,jdbcType=VARCHAR}
	  </update>
	  <!-- 获取所有的idcard信息 -->
	  <select id="getAllIdCardRelationByCurrentIdCards" resultType="com.wwh.vo.IdcardRelationVO">
	  	SELECT 
	  		id,
	  		user_id userId,
	  		current_id_card currentIdCard,
	  		last_id_card lastIdCard,
	  		current_disk_type currentDiskType,
	  		last_disk_type lastDiskType,
	  		current_disk_seq currentDiskSeq,
	  		last_disk_seq lastDiskSeq,
	  		current_role_id currentRoleId,
	  		last_role_id lastRoleId,
	  		statuxx statuxx
		FROM wallet_idcard_relation_t 
		WHERE current_id_card IN 
		<foreach item="item" index="index" collection="records" separator="," open="(" close=")"> 
			
				#{item} 
			
		</foreach> 
	  </select>
	  <select id="getIdCardRelationByCurrentIdCard" resultType="com.wwh.vo.IdcardRelationVO">
	    SELECT 
	  		id,
	  		user_id userId,
	  		current_id_card currentIdCard,
	  		last_id_card lastIdCard,
	  		current_disk_type currentDiskType,
	  		last_disk_type lastDiskType,
	  		current_disk_seq currentDiskSeq,
	  		last_disk_seq lastDiskSeq,
	  		current_role_id currentRoleId,
	  		last_role_id lastRoleId,
	  		statuxx statuxx
		FROM wallet_idcard_relation_t 
		WHERE  1=1
		<if test="idCard != null">
			AND current_id_card = #{idCard}
		</if>
		<if test="userId != null">
			AND user_id = #{userId}
		</if>
	  </select>
	  <!-- 得到这个用户再一个系统盘中初始进盘的idcard -->
	  <select id="getStartIdCardRelationByInfo" resultType="com.wwh.vo.IdcardRelationVO" parameterType="com.wwh.vo.IdcardRelationVO">
	    SELECT 
	  		id,
	  		user_id userId,
	  		current_id_card currentIdCard,
	  		last_id_card lastIdCard,
	  		current_disk_type currentDiskType,
	  		last_disk_type lastDiskType,
	  		current_disk_seq currentDiskSeq,
	  		last_disk_seq lastDiskSeq,
	  		current_role_id currentRoleId,
	  		last_role_id lastRoleId
		FROM wallet_idcard_relation_t 
		WHERE  1=1
		AND current_disk_type = #{currentDiskType}
		AND user_id = #{userId}
		AND current_id_card=queryStartIdCardRelationInfo(#{currentIdCard,jdbcType=VARCHAR}); 
	  </select>
	  
	  <select id="getIdCardRelationByIdCards" resultType="com.wwh.vo.IdcardRelationVO">
	    SELECT 
	  		id,
	  		user_id userId,
	  		current_id_card currentIdCard,
	  		last_id_card lastIdCard,
	  		current_disk_type currentDiskType,
	  		last_disk_type lastDiskType,
	  		current_disk_seq currentDiskSeq,
	  		last_disk_seq lastDiskSeq,
	  		current_role_id currentRoleId,
	  		last_role_id lastRoleId,
	  		statuxx statuxx
		FROM wallet_idcard_relation_t 
		WHERE  1=1
		<if test="idCards != null">
			AND current_id_card IN
			<foreach collection="idCards" index="index" item="idCard" separator="," open="(" close=")">
			 	#{idCard}
        	</foreach>
		</if>
		<if test="userId != null">
			AND user_id = #{userId}
		</if>
	  </select>
	  <!-- 修改某个盘的所有IDcard 的状态 -->
	  <update id="updateAllIdCardRelationStatuxx">
	  	UPDATE wallet_idcard_relation_t
		SET statuxx = #{statuxx}
		WHERE 1=1
		<if test="diskSeq != null">
			AND	current_disk_seq = #{diskSeq}
		</if>
		<if test="idCards != null">
			AND current_id_card IN
			<foreach collection="idCards" index="index" item="idCard" separator="," open="(" close=")">
			 	#{idCard.currentIdCard}
        	</foreach>
		</if>
		AND active_flag = 'Y'
		AND delete_flag = 'N'
	  </update>
	  <!-- 批量插入新的 IDCARD关系 记录 -->
	  <insert id="addIdcardRelationByList" >
		INSERT INTO wallet_idcard_relation_t (
			user_id,
			current_id_card,
			last_id_card,
			current_disk_type,
			last_disk_type,
			current_disk_seq,
			last_disk_seq,
			current_role_id,
			last_role_id,
			statuxx,
			active_flag,
			delete_flag,
			created_date,
			created_by,
			last_updated_date,
			last_updated_by
		)
		VALUES
			<foreach item="item" index="index" collection="records"  separator="," > 
		    (
			    #{item.userId,jdbcType=BIGINT}, 
			    #{item.currentIdCard,jdbcType=VARCHAR}, 
			    #{item.lastIdCard,jdbcType=VARCHAR}, 
			    #{item.currentDiskType,jdbcType=VARCHAR}, 
			    #{item.lastDiskType,jdbcType=VARCHAR}, 
			    #{item.currentDiskSeq,jdbcType=VARCHAR}, 
			    #{item.lastDiskSeq,jdbcType=VARCHAR}, 
			    #{item.currentRoleId,jdbcType=BIGINT}, 
			    #{item.lastRoleId,jdbcType=BIGINT}, 
			    #{item.statuxx,jdbcType=VARCHAR},
			    'Y',
			    'N',
			    NOW(),
			    #{item.userId,jdbcType=BIGINT}, 
			    NOW(),
			    #{item.userId,jdbcType=BIGINT}
		    )
			</foreach>
	  </insert>
	  
	  <insert id="addIdcardRelationByOne" parameterType="com.wwh.vo.IdcardRelationVO">
		  INSERT INTO wallet_idcard_relation_t (
				user_id,
				current_id_card,
				last_id_card,
				current_disk_type,
				last_disk_type,
				current_disk_seq,
				last_disk_seq,
				current_role_id,
				last_role_id,
				statuxx,
				active_flag,
				delete_flag,
				created_date,
				created_by,
				last_updated_date,
				last_updated_by
			)
			VALUES
			    (
				    #{userId,jdbcType=BIGINT}, 
				    #{currentIdCard,jdbcType=VARCHAR}, 
				    #{lastIdCard,jdbcType=VARCHAR}, 
				    #{currentDiskType,jdbcType=VARCHAR}, 
				    #{lastDiskType,jdbcType=VARCHAR}, 
				    #{currentDiskSeq,jdbcType=VARCHAR}, 
				    #{lastDiskSeq,jdbcType=VARCHAR}, 
				    #{currentRoleId,jdbcType=BIGINT}, 
				    #{lastRoleId,jdbcType=BIGINT}, 
				    #{statuxx,jdbcType=VARCHAR},
				    'Y',
				    'N',
				    NOW(),
				    #{userId,jdbcType=BIGINT}, 
				    NOW(),
				    #{userId,jdbcType=BIGINT}
			    )
	  </insert>
	  <select id="getDiskRelationsByIdCards" resultType="com.wwh.vo.WalletDiskRelationVO">
	  	SELECT  <include refid="Base_Column_List" />
	  	FROM 
	  	<choose>
				<when test="diskType == 'TIYAN'">
					wallet_disk_relation_tiyan_t
				</when>
				<when test="diskType == 'HUIMIN'">
					wallet_disk_relation_huimin_t
				</when>
				<when test="diskType == 'FUMIN'">
					wallet_disk_relation_fumin_t
				</when>
				<when test="diskType == 'XINGMIN'">
					wallet_disk_relation_xingmin_t
				</when>
			</choose>
		WHERE 
			id_card IN
			<foreach collection="idCards" index="index" item="idCard" separator="," open="(" close=")">
				 	#{idCard}
	        </foreach>
	    AND active_flag = 'Y'
	    AND delete_flag = 'N'
	  </select>
	  
	  <select id="getDiskRelationsByUserId" resultType="com.wwh.vo.WalletDiskRelationVO">
	  	SELECT  <include refid="Base_Column_List" />
	  	FROM 
	  	<choose>
			<when test="diskType == 'TIYAN'">
				wallet_disk_relation_tiyan_t
			</when>
			<when test="diskType == 'HUIMIN'">
				wallet_disk_relation_huimin_t
			</when>
			<when test="diskType == 'FUMIN'">
				wallet_disk_relation_fumin_t
			</when>
			<when test="diskType == 'XINGMIN'">
				wallet_disk_relation_xingmin_t
			</when>
		</choose>
		WHERE 
			user_id = #{userId}
		<if test="diskStatus != null">
			AND	disk_status = #{diskStatus}
		</if>
	    AND active_flag = 'Y'
	    AND delete_flag = 'N'
	  </select>
	  <select id="getIdCardsByDiskSeq" resultType="com.wwh.vo.IdcardRelationVO">
		SELECT
			id,
	  		user_id userId,
	  		current_id_card currentIdCard,
	  		last_id_card lastIdCard,
	  		current_disk_type currentDiskType,
	  		last_disk_type lastDiskType,
	  		current_disk_seq currentDiskSeq,
	  		last_disk_seq lastDiskSeq,
	  		current_role_id currentRoleId,
	  		last_role_id lastRoleId,
	  		statuxx statuxx	
		FROM
			wallet_idcard_relation_t
		WHERE
			current_disk_seq = #{diskSeq}
	  </select>
	    
  <select id="getDiskRelationVOBylocation" resultType="com.wwh.vo.WalletDiskRelationVO">
	SELECT
		<include refid="Base_Column_List" />
	FROM
		<choose>
			<when test="diskType == 'TIYAN'">
				wallet_disk_relation_tiyan_t
			</when>
			<when test="diskType == 'HUIMIN'">
				wallet_disk_relation_huimin_t
			</when>
			<when test="diskType == 'FUMIN'">
				wallet_disk_relation_fumin_t
			</when>
			<when test="diskType == 'XINGMIN'">
				wallet_disk_relation_xingmin_t
			</when>
		</choose>
	WHERE
		disk_seq = #{diskSeq}
	AND localtion IN 
	<foreach collection="locations" index="index" item="location" separator="," open="(" close=")">
		 	#{location}
    </foreach>
    AND active_flag = 'Y'
    AND delete_flag = 'N'
  </select>
  
  <select id="selectMyUnder" resultType="java.lang.Integer">
  		select count(1) from wwh_user_t where reference_id in (
  			select user_id from wallet_disk_relation_tiyan_t where disk_seq=#{diskSeq}
		)
		and user_id=#{userId}
  </select>
  
  
  <select id="selectMyRecorment" resultType="java.lang.Integer">
  		select 
  			remain_recommend_point 
  		from  
  			wallet_recommend_point_a_statistics_t 
  		where  user_id=#{userId}
  </select>
  
  
  
  
</mapper>
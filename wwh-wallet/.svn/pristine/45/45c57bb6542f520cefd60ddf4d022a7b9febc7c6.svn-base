package com.wwh.loginwx.controller;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.ExcessiveAttemptsException;
import org.apache.shiro.authc.LockedAccountException;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.wwh.common.ResultMsg;
import com.wwh.loginwx.config.WeixinConfig;
import com.wwh.loginwx.req.LoginwxRequest;
import com.wwh.loginwx.service.ILoginwxService;
import com.wwh.loginwx.util.LoginwxUtil;
import com.wwh.loginwx.vo.WXUserInfoVO;
import com.wwh.loginwx.vo.WXUserTokenVO;
import com.wwh.loginwx.vo.WeChatQRCodeVO;
import com.wwh.service.IMemberService;
import com.wwh.service.IUserService;
import com.wwh.util.DESUtils;
import com.wwh.util.MD5Utils;
import com.wwh.util.ReturnConstant;
import com.wwh.util.StringUtils;
import com.wwh.vo.UserVO;

@Controller
@RequestMapping("/pages")
public class LoginwxControlller {
	private static Logger logger = LogManager.getLogger(LoginwxControlller.class);
	private static final String roleName = "MEMBER";

	@Autowired
	ILoginwxService loginwxService;

	@Autowired
	IUserService userService;

	@Autowired
	IMemberService memberService;

	// 请求授权微信授权回调后页面发送微信登陆
	@RequestMapping(value = "/con", method = RequestMethod.GET)
	public String reqInit(HttpServletRequest request, HttpServletResponse response) {
		logger.info("进入微信登陆授权接口，开始请求授权：reqInit start");
		try {
			// 获取授权链接
			String url = LoginwxRequest.getWXAuthorizeUrl(LoginwxUtil.redirectUrl, LoginwxUtil.scopeUserinfo);
			// 重定向，让用户授权
			response.sendRedirect(url);
			logger.info("reqInit end");
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	// 请求授权微信授权回调后页面发送微信登陆
	@RequestMapping(value = "/loginwx", method = RequestMethod.GET)
	public String loginwx(HttpServletRequest request, HttpServletResponse response) throws Exception {
		logger.info("用户已成功授权，开始获取用户信息:loginwx start");
		// 获取传递的参数
		String code = request.getParameter("code");
		String state = request.getParameter("state");
		logger.info("成功得到了有效的授权码code= {}", code);
		logger.info("成功得到了有效的授权码state= {}", state);
		WXUserTokenVO wxUserTokenVO = null;
		WXUserInfoVO wxUserInfoVO = null;
		if (null != code && !"".equals(code) && LoginwxUtil.state.equals(state)) {
			// 得到有效的授权码，获取授权凭证
			wxUserTokenVO = LoginwxRequest.getWXUserToken(code);
			if (null != wxUserTokenVO) {
				logger.info("成功得到了获取用户信息凭证接口AccessToken={},openId={}", wxUserTokenVO.getAccessToken(),
						wxUserTokenVO.getOpenId());
				// 得到微信用户信息
				wxUserInfoVO = LoginwxRequest.getWXUserInfo(wxUserTokenVO.getAccessToken(), wxUserTokenVO.getOpenId());
				logger.info("微信用户信息：wxUserInfoVO= " + wxUserInfoVO);
			}
		}
		if (null != wxUserInfoVO) {
			WXUserInfoVO userInfoVO = loginwxService.getWXUserInfoByUnionId(wxUserInfoVO.getUnionId());
			if (null != userInfoVO) {
				// 若已经注册过则直接登陆
				UserVO userVO = loginwxService.getUserByUserId(userInfoVO.getUserId());
				try {

					String url = LoginwxUtil.loginURL + "?userName=" + userVO.getNickName() + "&passWord="
							+ userVO.getPassword() + "&state=" + LoginwxUtil.state + "&unionId="
							+ wxUserInfoVO.getUnionId() + "&userId=" + userInfoVO.getUserId();
					logger.info("username={},password={}", userVO.getNickName(), userVO.getPassword());
					try {
						logger.info("url={}", url);
						request.setAttribute("url", url);
						request.setAttribute("username", userVO.getNickName());
						request.setAttribute("password", userVO.getPassword());
					} catch (Exception e) {
						e.printStackTrace();
					}
					try {
						logger.info("跳转路径 action={}", LoginwxUtil.shrioLoginUrl);
						String action = LoginwxUtil.shrioLoginUrl;
						request.getRequestDispatcher(action).forward(request, response);
					} catch (ServletException e) {
						e.printStackTrace();
					}
					// response.sendRedirect(LoginwxUtil.shrioLoginUrl);
					// response.sendRedirect(LoginwxUtil.loginURL + "?userName="
					// + userVO.getNickName() + "&passWord="
					// + userVO.getPassword() + "&state=" + LoginwxUtil.state +
					// "&unionId="
					// + wxUserInfoVO.getUnionId() + "&userId=" +
					// userInfoVO.getUserId());

				} catch (IOException e) {
					e.printStackTrace();
				}
			} else {
				// 得到了微信用户信息,存入微信用户表,则创建新用户.
				wxUserInfoVO.setUserId(System.currentTimeMillis());
				wxUserInfoVO.setCreatedBy(wxUserInfoVO.getUserId());
				wxUserInfoVO.setLastUpdatedBy(wxUserInfoVO.getUserId());
				Long count = loginwxService.insertWXUserInfo(wxUserInfoVO);
				if (count > 0) {
					logger.info("插入微信用户信息成功userId={}", wxUserInfoVO.getUserId());
					// 注册用户
					loginwxService.registerMember(wxUserInfoVO.getUserId(), wxUserInfoVO);
					// 登陆
					try {
						String passWord = MD5Utils.encryptMD5("123456");

						String url = LoginwxUtil.loginURL + "?userName=" + wxUserInfoVO.getNickName() + "&passWord="
								+ passWord + "&state=" + LoginwxUtil.state + "&unionId=" + wxUserInfoVO.getUnionId()
								+ "&userId=" + wxUserInfoVO.getUserId();
						logger.info("username={},password={}", wxUserInfoVO.getNickName(), passWord);
						try {
							request.setAttribute("username", wxUserInfoVO.getNickName());
							request.setAttribute("password", passWord);
							request.setAttribute("url", url);
						} catch (Exception e) {
							e.printStackTrace();
						}
						try {
							String action = LoginwxUtil.shrioLoginUrl;
							action = DESUtils.getDecryptString(action);
							request.getRequestDispatcher(action).forward(request, response);
						} catch (ServletException e) {
							e.printStackTrace();
						}
						// response.sendRedirect(LoginwxUtil.shrioLoginUrl);
						// response.sendRedirect(LoginwxUtil.loginURL +
						// "?userName=" + wxUserInfoVO.getNickName()
						// + "&passWord=" + passWord + "&state=" +
						// LoginwxUtil.state + "&unionId="
						// + wxUserInfoVO.getUnionId() + "&userId=" +
						// wxUserInfoVO.getUserId());
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}
		}
		logger.info("loginwx end");
		return null;
	}

	/**
	 * 登陆
	 * 
	 * @param vo
	 * @param request
	 * @param redirectAttributes
	 * @return
	 */
	@RequestMapping(value = "/loginctl", method = RequestMethod.POST)
	@ResponseBody
	public ResultMsg<Object> userLogin(@RequestBody UserVO vo, HttpServletRequest request) {
		logger.info("userLogin start");
		ResultMsg<Object> rs = new ResultMsg<Object>();
		String userId = String.valueOf(vo.getUserId());
		List<Map<String, Object>> list = memberService.getMemberById(Long.parseLong(userId));
		logger.info("userLogin list: " + list);
		if (list.size() > 0) {
			Map<String, Object> data = list.get(0);
			data.remove("password");
			rs.setData(data);
			request.getSession().setAttribute("CURRENT_USER", vo.getUserId());
			rs.setReturnCode(ReturnConstant.RETURN_CODE_200);
			rs.setReturnMsg(ReturnConstant.RETURN_MSG_900);
		} else {
			rs.setReturnCode(ReturnConstant.RETURN_CODE_903);
			rs.setReturnMsg(ReturnConstant.RETURN_MSG_903);
		}
		logger.info("userLogin end");
		return rs;
	}

	/**
	 * 绑定手机号
	 * 
	 * @param vo
	 * @param request
	 * @param redirectAttributes
	 * @return
	 */
	@RequestMapping(value = "/bindPhone/{isTrue}", method = RequestMethod.POST)
	@ResponseBody
	public ResultMsg<Object> bindPhone(@RequestBody WXUserInfoVO wxUserInfoVO,@PathVariable String isTrue) {
		ResultMsg<Object> msg = new ResultMsg<Object>();
		msg = loginwxService.bindWXUser(wxUserInfoVO,isTrue);
		return msg;
	}

	/**
	 * 校验手机号是否存在
	 * 
	 * @param phone
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/validphone/{phone}", method = RequestMethod.GET)
	public ResultMsg<Object> validPhone(@PathVariable String phone) {
		return loginwxService.validPhone(phone);
	}

	// 请求授权微信授权回调后页面发送微信登陆
	@RequestMapping(value = "/son", method = RequestMethod.POST)
	public String reqInite(HttpServletRequest request, HttpServletResponse response) {
		logger.info("进入微信登陆授权接口，开始请求授权");
		try {
			// 获取授权链接
			String url = LoginwxRequest.getWXAuthorizeUrl(LoginwxUtil.codeRedirectUrl, LoginwxUtil.scopeUserinfo);
			// 重定向，让用户授权
			response.sendRedirect(url);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	@RequestMapping(value = "/getTwoBarCode", method = { RequestMethod.POST, RequestMethod.GET })
	public String getTwoBarCode(HttpServletRequest request, HttpServletResponse response) {
		logger.info("进入获取二维码事件");
		logger.info("用户已授权，开始获取用户信息");
		// 获取传递的参数
		String code = request.getParameter("code");
		String state = request.getParameter("state");
		String newsXml="";
		WXUserTokenVO wxUserTokenVO = null;
		WXUserInfoVO wxUserInfoVO = null;
		if (null != code && !"".equals(code) && LoginwxUtil.state.equals(state)) {
			// 得到有效的授权码，获取授权凭证
			wxUserTokenVO = LoginwxRequest.getWXUserToken(code);
			if (null != wxUserTokenVO) {
				// 得到微信用户信息
				wxUserInfoVO = LoginwxRequest.getWXUserInfo(wxUserTokenVO.getAccessToken(), wxUserTokenVO.getOpenId());
			}
		}
		if (null != wxUserInfoVO) {
			// 通过unionid获取用户注册信息
			WXUserInfoVO wxUserInfo = loginwxService.getWXUserInfoByUnionId(wxUserInfoVO.getUnionId());
			// 如果返回不为空 则标识用户注册过
			if (null != wxUserInfo) {
				//String jsnMsg = loginwxService.getParam(wxUserInfo);
				WeChatQRCodeVO wecarRecde = loginwxService.createTemporaryORCode(wxUserTokenVO.getAccessToken(),WeixinConfig.expireSeconds
						,wxUserInfo.getUserId());
				logger.info("返回的ticket ={}", wecarRecde.getTicket());
				// 获取二维码
				String imgUrl = loginwxService.chageQr(wecarRecde.getTicket());
				logger.info("获取二维码结果result={}", imgUrl);
				//得到可返回推送消息xml
				newsXml=loginwxService.changeImgToXML(wxUserInfoVO,imgUrl);
			}
		}
		return newsXml;
	}

	/**
	 * 登陆
	 * 
	 * @param vo
	 * @param request
	 * @param redirectAttributes
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/wxlogin", method = { RequestMethod.GET, RequestMethod.POST })
	@ResponseBody
	public ResultMsg<Object> wxUserLogin(HttpServletRequest request, HttpServletResponse rep,
			RedirectAttributes redirectAttributes) throws Exception {
		logger.info("微信登陆 wxUserLogin={}");
		ResultMsg<Object> rs = new ResultMsg<Object>();
		try {
			String username = request.getAttribute("username").toString();
			String password = request.getAttribute("password").toString();
			logger.info("用户名和密码 ：username={},password={}", username, password);
			// String password = vo.getPassword(); // 此处用户userid没加密
			String userName = username;
			Map<String, Object> queryLoginParm = new HashMap<String, Object>();
			queryLoginParm.put("userName", userName);
			List<Map<String, Object>> un = userService.queryUserIdByLogin(queryLoginParm);
			username = un.size() > 0 ? String.valueOf(un.get(0).get("userId")) : "";
			UsernamePasswordToken token = new UsernamePasswordToken(username, password);
			Subject currentUser = SecurityUtils.getSubject();
			token.setRememberMe(true);
			// InetAddress addr = InetAddress.getLocalHost();
			// token.setHost(addr.getHostAddress().toString());
			currentUser.login(token);
			long uId = 0;
			uId = StringUtils.isEmpty(username) ? uId : Long.parseLong(username);
			UserVO user = userService.getUserRole(uId);
			Set<String> rolesName = user.getRolesName();
			boolean isMember = rolesName.contains(roleName);
			if (isMember) {
				List<Map<String, Object>> list = memberService.getMemberById(uId);
				if (list.size() > 0) {
					Map<String, Object> data = list.get(0);
					data.remove("password");
					rs.setData(data);
				}
			}
			logger.info("action action={}", request.getAttribute("url").toString());
			String action = request.getAttribute("url").toString();
			rep.sendRedirect(action);
			logger.info("重定向成功了");
			// action = DESUtils.getDecryptString(action);
			// request.getRequestDispatcher(action).forward(request, rep);
			rs.setReturnCode(ReturnConstant.RETURN_CODE_200);
			rs.setReturnMsg(ReturnConstant.RETURN_MSG_900);
		} // catch(UnknownHostException e){
			// e.printStackTrace();
			// }
		catch (LockedAccountException lae) {
			rs.setReturnCode(ReturnConstant.RETURN_CODE_901);
			rs.setReturnMsg(ReturnConstant.RETURN_MSG_901);
		} catch (ExcessiveAttemptsException eae) {
			rs.setReturnCode(ReturnConstant.RETURN_CODE_902);
			rs.setReturnMsg(ReturnConstant.RETURN_MSG_902);
		} catch (AuthenticationException ae) {
			rs.setReturnCode(ReturnConstant.RETURN_CODE_903);
			rs.setReturnMsg(ReturnConstant.RETURN_MSG_903);
		}
		return rs;
	}

}
